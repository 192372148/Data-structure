3.
Given the head of a singly linked list, return number of nodes present in a linked 

Example 1:
1->2->3->5->8
Output 5

code :


#include <stdio.h>
#include <stdlib.h>
struct ListNode {
    int val;
    struct ListNode* next;
};
int countNodes(struct ListNode* head) {
    int count = 0;
    struct ListNode* current = head;   
    while (current != NULL) {
        count++;
        current = current->next;
    }
    return count;
}
int main() {
    struct ListNode* head = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* node1 = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* node2 = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* node3 = (struct ListNode*)malloc(sizeof(struct ListNode));
    struct ListNode* node4 = (struct ListNode*)malloc(sizeof(struct ListNode));
    head->val = 1;
    head->next = node1;
    node1->val = 2;
    node1->next = node2;
    node2->val = 3;
    node2->next = node3;
    node3->val = 5;
    node3->next = node4;
    node4->val = 8;
    node4->next = NULL;
    int nodeCount = countNodes(head);
    printf("Number of nodes in the linked list: %d\n", nodeCount);
    free(head);
    free(node1);
    free(node2);
    free(node3);
    free(node4);
    return 0;
}


output :

Number of nodes in the linked list: 5
